#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re
import socket, base64, os

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()

def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)
    print(conexao, dados)
    
    #Quer dizer que a mensagem está inteira
    if dados.endswith(b'\n'):
        #separar em linhas os dados recebidos
        qtdDado = dados.split(b'\r\n')
        if len(qtdDado) > 2:
            for i in range(0,len(qtdDado)-1):
                if b'PING' in qtdDado[i]:
                    qtdDado[i] = qtdDado[i].replace(b'PING ', b'')
                    qtdDado[i] = qtdDado[i].replace(b'\r\n', b'')
                    args = qtdDado[i]
                    conexao.enviar(b':server PONG server :%s\r\n' % args)
        else:
    #Se achar um PING vai dar o PONG
            if b'PING' in dados:
                dados = dados.replace(b'PING ', b'')
                dados = dados.replace(b'\r\n', b'')
                args = dados
                conexao.enviar(b':server PONG server :%s\r\n' % args)
    else:#qr dizer que a mensagem nao está inteira
        qtdDado = dados.split(b'\r\n')
        for i in range(0,len(qtdDado)-1):
            if b'PING' in qtdDado[i]:
                qtdDado[i] = qtdDado[i].replace(b'PING ', b'')
                qtdDado[i] = qtdDado[i].replace(b'\r\n', b'')
                args = qtdDado[i]
                conexao.enviar(b':server PONG server :%s\r\n' % args)
                print(b'deu Certo')
        
    

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()

