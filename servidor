#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re
import socket, base64, os

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

residuos = b''
dicionario = []
konexoes = []

def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()

def dados_recebidos(conexao, dados):
    global residuos
    global dicionario
    global konexoes
    if dados == b'':
        return sair(conexao)
    print(conexao, dados) 
    ID = str(conexao)
    ID = ID.split(' ')[3]
    ID = ID.replace('>', '')
    ID = ID.replace(' ', '')
    #Pegar todas as conexoes que entrarem
    if conexao in konexoes:
        print('ja ta dentro')
    else:
        konexoes.append(conexao)
    #Significa que existe uma mensagem inteira ja
    if b'\n' in (residuos+dados):
        residuos += dados
        residuos = residuos.split(b'\n',1)
        dados = residuos[0]+b'\n'
        residuos = residuos[1]
        if b'PING' in dados:
            dados = dados.split(b'PING ')[1]
            print(b':server PONG server :%s' % dados)
            conexao.enviar(b':server PONG server :%s' % dados)
            while(b'PING' in residuos and b'\n' in residuos):
                dados = residuos.split(b'\n', 1)[0]
                residuos = residuos.split(b'\n',1)[1]
                dados = dados.split(b'PING ')[1]+b'\n'
                print(b':server PONG server :%s' %dados)
                print(b'residuos: ', residuos)
                conexao.enviar(b':server PONG server :%s' % dados)
        if b'NICK' in dados:
            if b'NICK' in dicionario:
                print(b'fudeu')
            else:
                #ADD no dicionario
                dicionario.append(dados)
                print(dicionario)
                print(b'add')
                
    else:
        #Ir acumulando dados ate que se encontre uma mensagem inteira
        residuos += dados

    
        
def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()

