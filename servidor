#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re
import socket, base64, os

class logins:
    def __init__(self, dataNick=None, dataConnection = None):
        self.dataNick = dataNick
        self.dataConnection = dataConnection
        self.channel = []

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

residuos = b''
dicionario = []
konexoes = []
first = logins(None,None)
login = []

def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()

def dados_recebidos(conexao, dados):
    global residuos
    global dicionario
    global konexoes
    global first
    global login 
    if dados == b'':
        return sair(conexao)
    print(conexao, dados) 
    ID = str(conexao)
    ID = ID.split(' ')[3]
    ID = ID.replace('>', '')
    ID = ID.replace(' ', '')
    #Pegar todas as conexoes que entrarem
    if conexao in konexoes:
        print('ja ta dentro')
    else:
        konexoes.append(conexao)
    #Significa que existe uma mensagem inteira ja
    if b'\n' in (residuos+dados):
        residuos += dados
        residuos = residuos.split(b'\n',1)
        dados = residuos[0]+b'\n'
        residuos = residuos[1]
        continuar = True        
        if b'PING' in dados:
            dados = dados.split(b'PING ')[1]
            print(b':server PONG server :%s' % dados)
            conexao.enviar(b':server PONG server :%s' % dados)
            while(b'PING' in residuos and b'\n' in residuos):
                dados = residuos.split(b'\n', 1)[0]
                residuos = residuos.split(b'\n',1)[1]
                dados = dados.split(b'PING ')[1]+b'\n'
                print(b':server PONG server :%s' %dados)
                print(b'residuos: ', residuos)
                conexao.enviar(b':server PONG server :%s' % dados)
        elif b'NICK' in dados:
        #Verificação se é valido
            dados = dados.split(b'NICK ', 1)[1]
            dados = dados.replace(b'\r\n', b'')
            if validar_nome(dados):

        #ADD no dicionario
        #Adicionando o primeiro nick
                second = first
                if first.dataNick == None:
                    print('Primeira adicao')
                    first = logins(dados,conexao)
                    print(first.dataNick)
                    print(first.dataConnection)
                
                    print(b':server 001 %s :Welcome\r\n' %dados)
                    print(b':server 422 %s :MOTD File is missing\r\n' %dados)

                    conexao.enviar(b':server 001 %s :Welcome\r\n' %dados)
                    conexao.enviar(b':server 422 %s :MOTD File is missing\r\n' %dados)
                    login.append(first)
            #Caso tenham mais nicks no test
                else:
                    estaContido = False
                    jaPossui = False
                    for i in range(len(login)):
                        if login[i].dataConnection == conexao:
                            estaContido = True
                            tmp = login[i].dataNick
                            print('Conexao existente')
                        if login[i].dataNick.lower() == dados.lower():
                            jaPossui = True
                            print('Nome existente')
                        #Verificação se ja estava presente e também se ja existe esse nick
                    if jaPossui and estaContido:
                        #Uma pessoa que ja possui um nick quer colocar um nick de uma ja existente
                        print(b':server 433 %s %s :Nickname is already in use\r\n' % (tmp, dados))
                        conexao.enviar(b':server 433 %s %s :Nickname is already in use\r\n' % (tmp, dados))
                    elif jaPossui and not estaContido:
                    #Uma pessoa que nao possui nick quer colocar um nick de alguem
                        print(b':server %s :Nickname is already in use\r\n' % (dados))
                        conexao.enviar(b':server 433 * %s :Nickname is already in use\r\n' % (dados))
                    elif not jaPossui and estaContido:
                        #Uma pessoa que possui nick quer colocar um nick disponivel
                        print(b':%s NICK %s\r\n' % (tmp, dados))
                        conexao.enviar(b':%s NICK %s\r\n' % (tmp, dados))
                        tmp2 = 0
                        for i in range(len(login)):
                            if login[i].dataNick == tmp: 
                                break
                            tmp2 = tmp2+1
                        print('esse eh o valor: ',tmp2)
                        login.pop(tmp2)
                        tmp = logins(dados, conexao)
                        login.append(tmp)
                    else:
                    #Colocar um nick novo de uma conexao nova
                        tmp = logins(dados, conexao)
                        login.append(tmp)
                        print(b':server 001 %s :Welcome\r\n' %dados)                                          
                        print(b':server 422 %s :MOTD File is missing\r\n' %dados)
                        conexao.enviar(b':server 001 %s :Welcome\r\n' %dados)
                        conexao.enviar(b':server 422 %s :MOTD File is missing\r\n' %dados)      
            else:
                print(b':server 432 * %s :Erroneous nickname\r\n' %dados)
                conexao.enviar(b':server 432 * %s :Erroneous nickname\r\n' %dados)
        elif b'PRIVMSG' in dados:
        #Verificacao se o nick está contido
            estaContido = False
            print('tamo vendo',dados.split(b'PRIVMSG '))
            #Verificação se o remetente esta no canal que quer se comunicar
            estaNoCanal = False
            for i in range(len(login)): 
                if login[i].dataConnection == conexao:
                    for j in range(len(login[i].channel)):
                        if login[i].channel[j] in dados.lower():
                            estaNoCanal = True
                            break
            if estaNoCanal:
                estaContido = True
                canal = dados.split(b'PRIVMSG ')[1]
                msgCanal = canal.split(b':')[1]
                canal = canal.split(b':')[0]
                canal = canal.replace(b' ', b'')
                canal = canal.replace(b'#', b'')
                msgCanal = msgCanal.replace(b'\r\n',b'')
                print('essa eh o canal ' ,canal)
                print('esse e a msg ', msgCanal)
                    
        #Info retiradas do socket
            dados = dados.split(b'PRIVMSG ', 1)[1]

            dados = dados.split(b':',1)
            msg = dados[1]
            msg = msg.replace(b'\r\n',b'')
            nick = dados[0]
            nick = nick.replace(b' ', b'')            
            print(nick)
            print(nick.lower())
        #Info retiradas do que a gente ja tem
            for i in range(len(login)):
                print('esses sao os nicks: ',login[i].dataNick)
            #Pegar a conexao do destino
                if login[i].dataNick == nick.lower():
             #       print('reconheceu')
                    destino = login[i].dataConnection
                    tmp3 = login[i].dataNick
                    estaContido = True
            #Pegar o nick do remetente
                if login[i].dataConnection == conexao:
                    nickRemetente = login[i].dataNick
                #if login[i].channel is not None:

            if estaContido:   
               #print('testes3',b':%s PRIVMSG %s :%s\r\n' % (nickRemetente, nick, msg))
                if estaNoCanal:
                    print('entrei aqui')
                    for i in range(len(login)):
                        print('os canais do login:',login[i].dataNick,'Sao esses:',login[i].channel)
                        if login[i].dataConnection is not conexao:
                            if canal.lower() in login[i].channel:
                                #print('essa eh a conexao: ',login[i].dataConnection)
                                #print(b':%s PRIVMSG #%s :%s\r\n' % (nickRemetente, canal, msgCanal))
                                #login[i].dataConnection.enviar(b':%s PRIVMSG #%s :%s\r\n' % (nickRemetente, canal, msgCanal))
                                print('essa eh a msg log')
                                print(login[i].dataConnection.enviar(b':%s PRIVMSG #%s :%s\r\n' % (nickRemetente, canal, msgCanal)))
                else:
                    destino.enviar(b':%s PRIVMSG %s :%s\r\n' % (nickRemetente, nick, msg))
            #print(residuos)
            if b'NICK' in residuos:
               # print('tamo aqui')
            #Verificação se é valido
               # print('residuos aqui: ', residuos)
               # for i in range(len(login)):
               #     print(login[i].dataNick)
                residuos = residuos.split(b'NICK ', 1)[1]
                residuos = residuos.replace(b'\r\n', b'')
                if validar_nome(residuos):

            #ADD no dicionario
            #Adicionando o primeiro nick
                    second = first
                    if first.dataNick == None:
                    #    print('Primeira adicao')
                        first = logins(dados,conexao)
                    #    print(first.dataNick)
                    #    print(first.dataConnection)
                    
                        print(b':server 001 %s :Welcome\r\n' %residuos)
                        print(b':server 422 %s :MOTD File is missing\r\n' %residuos)

                        conexao.enviar(b':server 001 %s :Welcome\r\n' %residuos)
                        conexao.enviar(b':server 422 %s :MOTD File is missing\r\n' %residuos)
                        login.append(first)
                #Caso tenham mais nicks no test
                    else:
                        estaContido = False
                        jaPossui = False
                        for i in range(len(login)):
                            if login[i].dataConnection == conexao:
                                estaContido = True
                                tmp = login[i].dataNick
                                print('Conexao existente')
                            if login[i].dataNick.lower() == residuos.lower():
                                jaPossui = True
                                print('Nome existente')
                            #Verificação se ja estava presente e também se ja existe esse nick
                        if jaPossui and estaContido:
                            #Uma pessoa que ja possui um nick quer colocar um nick de uma ja existente
                            print(b':server 433 %s %s :Nickname is already in use\r\n' % (tmp, residuos))
                            conexao.enviar(b':server 433 %s %s :Nickname is already in use\r\n' % (tmp, residuos))
                        elif jaPossui and not estaContido:
                        #Uma pessoa que nao possui nick quer colocar um nick de alguem
                            print(b':server %s :Nickname is already in use\r\n' % (residuos))
                            conexao.enviar(b':server 433 * %s :Nickname is already in use\r\n' % (residuos))
                        elif not jaPossui and estaContido:
                            #Uma pessoa que possui nick quer colocar um nick disponivel
                            print(b':%s NICK %s\r\n' % (tmp, residuos))
                            conexao.enviar(b':%s NICK %s\r\n' % (tmp, residuos))
                            tmp2 = 0
                            for i in range(len(login)):
                                if login[i].dataNick == tmp:
                              #      print('achei o repetido')
                                    break
                                tmp2 = tmp2+1
                            print('esse eh o valor: ',tmp2)
                            login.pop(tmp2)
                            lol = logins(residuos, conexao)
                            login.append(lol)
                        else:
                        #Colocar um nick novo de uma conexao nova
                            lol = logins(residuos, conexao)
                            login.append(lol)
                            print(b':server 001 %s :Welcome\r\n' %residuos)                                          
                            print(b':server 422 %s :MOTD File is missing\r\n' %residuos)
                            conexao.enviar(b':server 001 %s :Welcome\r\n' %residuos)
                            conexao.enviar(b':server 422 %s :MOTD File is missing\r\n' %residuos)      
                else:
                    print(b':server 432 * %s :Erroneous nickname\r\n' %residuos)
                    conexao.enviar(b':server 432 * %s :Erroneous nickname\r\n' %residuos)
        elif b'JOIN' in dados:
            dados = dados.split(b'JOIN ',1)[1]
            print(dados)
            ch = dados
            ch = ch.replace(b'#', b'')
            ch = ch.replace(b'\r\n', b'')
            for i in range(len(login)):
                if login[i].dataConnection == conexao:
                    tmp1 = login[i].dataNick
                    login[i].channel.append(ch)
            print(b':%s JOIN :#%s\r\n' %(tmp1, ch))
            conexao.enviar(b':%s JOIN :#%s\r\n' %(tmp1, ch))
        elif b'PART' in dados:
            #s1.sendall(b'PART %s\r\n' % ch2)
            dados = dados.split(b'PART ', 1)[1]
            dados = dados.split(b' ',1)[0]
            dados = dados.replace(b'\r\n', b'')
            dados = dados.replace(b'#', b'')
            print(b'entrou aqui')
            for i in range(len(login)):
                if login[i].dataConnection == conexao:
                    nick = login[i].dataNick
            ch = dados
            for i in range(len(login)):
                if ch in login[i].channel:
                    if login[i].dataConnection == conexao:
                        print('antes do delete:', login[i].channel)
                        login[i].channel.remove(ch)
                        print('dps do delete:', login[i].channel)
                    print(login[i].dataConnection)
                    login[i].dataConnection.enviar(b':%s PART #%s\r\n' %(nick,ch))
                    #print(b':%s PART %s\r\n' %(nick,ch))
    else:
        #Ir acumulando dados ate que se encontre uma mensagem inteira
        residuos += dados
    

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()

